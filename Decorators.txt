In Python, functions are the first class objects, which means that:
-Functions are objects; they can be referenced to, passed to a variable and returned from other functions as well.
-Functions can be defined inside another function and can also be passed as argument to another function.


Decorators are very powerful and useful tool in Python since it allows programmers to modify the behavior of function
or class. Decorators allow us to wrap another function in order to extend the behavior of wrapped function,
without permanently modifying it.
In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.

@gfg_decorator
def hello_decorator():
    print("Gfg")

Above code is equivalent to -

def hello_decorator():
    print("Gfg")

hello_decorator = gfg_decorator(hello_decorator)'''
In the above code,gfg_decorator is a callable function, will add some code on top of some another callable function,
hello_decorator function and return the wrapper function.


****************************************************************************************************
When we call a function with parentheses, the function gets execute
 In another case, when we call a function without parentheses it will not execute the code
















